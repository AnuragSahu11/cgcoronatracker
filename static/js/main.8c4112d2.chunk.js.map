{"version":3,"sources":["components/Counters.js","components/Allcounters.js","components/header.js","components/footer.js","containers/App.js","serviceWorker.js","index.js"],"names":["Counters","styleProp","cases","info","val","console","log","int","className","start","redraw","end","Allcounters","active","deceased","confirmed","recovered","Header","districtName","handleChange","optionItems","map","name","i","value","onChange","Footer","App","useState","data","setData","setLoading","district","setDistrict","ddData","setDdData","useEffect","fetch","then","response","json","coronaData","cData","Chhattisgarh","districtData","temporaryData","dropdownData","Object","keys","hasOwnProperty","e","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yVAoBeA,MAhBf,YAA0C,IAAvBC,EAAsB,EAAtBA,UAAUC,EAAY,EAAZA,MAAMC,EAAM,EAANA,KAEzBC,EAAMF,EACZG,QAAQC,IAAIF,GACZ,IAAMG,EAAML,EAAME,EAClB,OACI,yBAAKI,UAAW,mBAAmBP,GAC/B,yBAAKO,UAAU,+BACX,uBAAGA,UAAU,gBAAgBL,GAC7B,uBAAGK,UAAU,gBAAgB,kBAAC,IAAD,CAASC,MAAOF,EAAKG,QAAQ,EAAMC,IAAKT,Q,MCGtEU,MAXf,YAA4D,IAAtCC,EAAqC,EAArCA,OAAOC,EAA8B,EAA9BA,SAASC,EAAqB,EAArBA,UAAUC,EAAW,EAAXA,UAC5C,OACI,yBAAKR,UAAU,cACX,kBAAC,EAAD,CAAWL,KAAK,YAAYD,MAAOa,EAAWd,UAAU,YACxD,kBAAC,EAAD,CAAWE,KAAK,SAASD,MAAOW,EAAQZ,UAAU,YAClD,kBAAC,EAAD,CAAWE,KAAK,YAAYD,MAAOc,EAAWf,UAAU,YACxD,kBAAC,EAAD,CAAWE,KAAK,WAAWD,MAAOY,EAAUb,UAAU,c,MCqBnDgB,MA7Bf,YAA6C,IAA5BC,EAA2B,EAA3BA,aAAaC,EAAc,EAAdA,aAC1BD,EAAa,GAAG,kBAChB,IAAIE,EAAcF,EAAaG,KAAI,SAACC,EAAKC,GAAN,OAC3B,4BAAQC,MAAOF,GAAOA,MAE9B,OACI,6BAASd,UAAU,UACf,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,sBAAd,gBAGA,wBAAIA,UAAU,OACd,wBAAIA,UAAU,sBAAd,gBAIJ,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,oBAAf,mEAEQ,4BACAiB,SAAUN,GADV,+EAEIC,EAFJ,wECTLM,MAXf,WAEI,OACI,yBAAKlB,UAAU,UACX,yBAAKA,UAAU,IACX,uBAAGA,UAAU,gBAAb,6B,YCwCDmB,MAvCf,WAAe,IAAD,EAEWC,mBAAS,IAFpB,mBAELC,EAFK,KAEAC,EAFA,OAGiBF,oBAAS,GAH1B,mBAGGG,GAHH,aAImBH,mBAAS,QAJ5B,mBAILI,EAJK,KAIIC,EAJJ,OAKgBL,mBAAS,IALzB,mBAKLM,EALK,KAKGC,EALH,KA8Bd,OAvBEC,qBAAU,WACNC,MAAM,yDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACE,IAAMC,EAAQD,EAAWE,aAAaC,aACtCb,GAAW,GACX,IAGIc,EAHEC,EAAeC,OAAOC,KAAKN,GAEjCP,EAAUW,GAENJ,EAAMO,eAAejB,KAErBa,EAAgBH,EAAMV,GACtBF,EAAQe,SAGR,CAACb,IAQjB,yBAAKxB,UAAU,IACb,kBAAC,EAAD,CAAQU,aAAcgB,EAAQf,aAPhC,SAAsB+B,GAAG,IACd1B,EAAS0B,EAAEC,OAAX3B,MACPS,EAAYT,MAMd,kBAAC,EAAD,CAAaT,UAAWc,EAAKd,UAAWF,OAAQgB,EAAKhB,OAAQG,UAAWa,EAAKb,UAAWF,SAAUe,EAAKf,WACvG,kBAAC,EAAD,QC9BgBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.8c4112d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/_card.scss'\r\nimport CountUp from 'react-countup';\r\n\r\nfunction Counters({styleProp,cases,info}){\r\n    \r\n    const val = cases;\r\n    console.log(val)\r\n    const int = cases-val;\r\n    return(\r\n        <div className={\"card col-1-of-4 \"+styleProp}>\r\n            <div className=\"card__side card__side-front\">\r\n                <p className=\"card__para-1\">{info}</p>\r\n                <p className=\"card__para-2\">{<CountUp start={int} redraw={true} end={cases} />}</p>\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counters","import React from 'react';\r\nimport Counters from './Counters';\r\nimport '../css/_allcounter.scss'\r\n\r\n\r\nfunction Allcounters({active,deceased,confirmed,recovered}){\r\n    return(\r\n        <div className=\"allcounter\">\r\n            <Counters  info=\"confirmed\" cases={confirmed} styleProp=\"card__1\" />\r\n            <Counters  info=\"active\" cases={active} styleProp=\"card__2\" />\r\n            <Counters  info=\"recovered\" cases={recovered} styleProp=\"card__3\" />\r\n            <Counters  info=\"deceased\" cases={deceased} styleProp=\"card__4\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Allcounters","import React from 'react';\r\nimport '../css/_header.scss'\r\n\r\nfunction Header({districtName,handleChange}){\r\n    districtName[0]=\"Select District\"\r\n    let optionItems = districtName.map((name,i) =>\r\n            <option value={name}>{name}</option>)\r\n    \r\n    return(\r\n        <section className=\"header\">\r\n            <div className=\"header__heading\">\r\n                <h1 className=\"header__heading-h1\">\r\n                    Chhattisgarh\r\n                </h1>\r\n                <hr className=\"hr\"/>\r\n                <h1 className=\"header__heading-h1\">\r\n                    Coronameter\r\n                </h1>\r\n            </div>\r\n            <div className=\"header__heading\">\r\n            <div className=\"header__dropdown\">\r\n                    \r\n                    <select\r\n                    onChange={handleChange}>\r\n                       {optionItems}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\n\r\nfunction Footer(){\r\n\r\n    return(\r\n        <div className=\"footer\">\r\n            <div className=\"\">\r\n                <p className=\"footer__para\">Created by Anurag Sahu</p>                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer ","import React,{ useEffect, useState } from 'react';\r\nimport AllCounters from '../components/Allcounters';\r\nimport Header from '../components/header';\r\nimport Footer from '../components/footer';\r\nimport '../css/_base.scss';\r\nimport '../css/_footer.scss';\r\n\r\n\r\nfunction App(){\r\n  \r\n  const [data,setData] = useState({})\r\n  const [loading,setLoading] = useState(true)\r\n  const [district,setDistrict] = useState('Durg')\r\n  const [ddData, setDdData] = useState([])\r\n\r\n  useEffect(() => {\r\n      fetch('https://api.covid19india.org/state_district_wise.json')\r\n      .then(response => response.json())\r\n      .then(coronaData => {\r\n              const cData = coronaData.Chhattisgarh.districtData\r\n              setLoading(false)\r\n              const dropdownData = Object.keys(cData)\r\n              \r\n              setDdData(dropdownData)\r\n              var temporaryData\r\n              if( cData.hasOwnProperty(district) )\r\n               {\r\n                  temporaryData = cData[district];\r\n                  setData(temporaryData);  \r\n                } \r\n                })\r\n                },[district]) \r\n  \r\n  function handleChange(e){\r\n      const {value} = e.target\r\n      setDistrict(value)\r\n  }\r\n  \r\nreturn(\r\n  <div className=\"\">\r\n    <Header districtName={ddData} handleChange={handleChange} />\r\n    <AllCounters confirmed={data.confirmed} active={data.active} recovered={data.recovered} deceased={data.deceased} />\r\n    <Footer />\r\n  </div>\r\n  \r\n)}\r\n\r\nexport default App;\r\n//return( loading? <h1>loading...</h1>:(\r\n  //<h1>{data.confirmed}</h1>))","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}